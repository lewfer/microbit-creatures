<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id=":fym;dE{NZx?Bfl!h/Ec" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="YeUq]T{`D54%5kuBCVL}" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum enumFrontBack {" line1="    front," line2="    back" line3="}" numlines="4"></mutation><next><block type="typescript_statement" id="8t^*|t1:/nM5:@UhzFOi" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum enumSide {" line1="    left," line2="    right" line3="}" numlines="4"></mutation><next><block type="typescript_statement" id="s2pj,H38%6bK(z8)a?w+" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum enumJoint {" line1="    hip," line2="    knee" line3="}" numlines="4"></mutation><next><block type="typescript_statement" id=",qz]o%n[)t/Ka+PcO?l|" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum enumDirection {" line1="    forward," line2="    backward," line3="    up," line4="    down," line5="    middle" line6="}" numlines="7"></mutation><next><block type="typescript_statement" id="v!ghF{PyUP@*JQ%)d=Ex" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace creatures {" line1="    //% blockId=setNewPosition" line2="    //% block=&quot;set position %frontback %side %joint %position&quot;" line3="    export function setNewPosition(frontback: enumFrontBack, side: enumSide, joint: enumJoint, position: enumDirection) {" line4="        serial.writeLine(&quot;setNewPosition &quot; + frontback + &quot;,&quot; + side + &quot;,&quot; + joint + &quot;,&quot; + position)" line5="        let newAngle" line6="        multiplier = 1" line7="        if (side == enumSide.left) {" line8="            multiplier = 1" line9="        } else {" line10="            multiplier = -1" line11="        }" line12="        if (position == enumDirection.forward) {" line13="            newAngle = HIPFORWARD" line14="        } else if (position == enumDirection.backward) {" line15="            newAngle = HIPBACKWARD" line16="        } else if (position == enumDirection.up) {" line17="            newAngle = KNEEUP" line18="        } else if (position == enumDirection.down) {" line19="            newAngle = KNEEDOWN" line20="        } else {" line21="            newAngle = 90" line22="        }" line23="        newAngle = 90 + newAngle * multiplier" line24="        let idx = getIndex(frontback, side, joint)" line25="        newPositions[idx] = newAngle" line26="        serial.writeLine(&quot;set &quot; + idx + &quot;,&quot; + newAngle)" line27="    }" line28="" line29="    //% blockId=smoothMoveTogether" line30="    //% block=&quot;smooth move&quot;" line31="    export function smoothMoveTogether() {" line32="        // Compute deltas" line33="        deltas = [" line34="            0," line35="            (newPositions[1] - positions[1])," line36="            (newPositions[2] - positions[2])," line37="            (newPositions[3] - positions[3])," line38="            (newPositions[4] - positions[4])," line39="            (newPositions[5] - positions[5])," line40="            (newPositions[6] - positions[6])," line41="            (newPositions[7] - positions[7])," line42="            (newPositions[8] - positions[8])" line43="        ]" line44="" line45="        //serial.writeLine(&quot;delta &quot; + positions[1] + &quot; &quot; + newPositions[1] + &quot; &quot; + deltas[1] )" line46="        // Ease servos to their new position" line47="        for (let idx2 = 0; idx2 &lt;= numSteps; idx2++) {" line48="            for (let servo=1; servo&lt;=8; servo++) {" line49="                easeServo(servo, positions[servo], deltas[servo], idx2 / numSteps)" line50="            }" line51="            //limitedMove(1, positions[1])" line52="            //let easePosition = easeServo(1, positions[1], deltas[1], idx / numSteps)" line53="            //serial.writeLine(&quot;position&quot; + deltas[1] + &quot;,&quot; + easePosition)" line54="            basic.pause(20)" line55="        }" line56="" line57="        // Update to final positions" line58="        for (let servo2 = 1; servo2 &lt;= 8; servo2++)" line59="            positions[servo2] = newPositions[servo2]" line60="    }" line61="    function getIndex(frontback: enumFrontBack, side: enumSide, joint: enumJoint) {" line62="        let idx3=0;" line63="        if (frontback == enumFrontBack.front) {" line64="            if (side == enumSide.left) {" line65="                if (joint == enumJoint.hip) {" line66="                idx3 = 1" line67="            } else {" line68="                idx3 = 2" line69="            }" line70="        } else {" line71="            if (joint == enumJoint.hip) {" line72="                idx3 = 3" line73="                } else {" line74="                    idx3 = 4" line75="                }" line76="            }" line77="        } else {" line78="            if (side == enumSide.left) {" line79="                if (joint == enumJoint.hip) {" line80="                    idx3 = 5" line81="                } else {" line82="                    idx3 = 6" line83="                }" line84="            } else {" line85="                if (joint == enumJoint.hip) {" line86="                    idx3 = 7" line87="                } else {" line88="                    idx3 = 8" line89="                }" line90="            }" line91="        }" line92="        return idx3" line93="    }" line94="function limitedMove (servo: number, angle: number) {" line95="    if (_newAngle &lt; 20) {" line96="        _newAngle = 20" line97="    } else if (_newAngle &gt; 160) {" line98="        _newAngle = 160" line99="    } else {" line100="        _newAngle = angle" line101="    }" line102="    if (servo == 1) {" line103="        Kitronik_Robotics_Board.servoWrite(Kitronik_Robotics_Board.Servos.Servo1, _newAngle)" line104="    } else if (servo == 2) {" line105="        Kitronik_Robotics_Board.servoWrite(Kitronik_Robotics_Board.Servos.Servo2, _newAngle)" line106="    } else if (servo == 3) {" line107="        Kitronik_Robotics_Board.servoWrite(Kitronik_Robotics_Board.Servos.Servo3, _newAngle)" line108="    } else if (servo == 4) {" line109="        Kitronik_Robotics_Board.servoWrite(Kitronik_Robotics_Board.Servos.Servo4, _newAngle)" line110="    } else if (servo == 5) {" line111="        Kitronik_Robotics_Board.servoWrite(Kitronik_Robotics_Board.Servos.Servo5, _newAngle)" line112="    } else if (servo == 6) {" line113="        Kitronik_Robotics_Board.servoWrite(Kitronik_Robotics_Board.Servos.Servo6, _newAngle)" line114="    } else if (servo == 7) {" line115="        Kitronik_Robotics_Board.servoWrite(Kitronik_Robotics_Board.Servos.Servo7, _newAngle)" line116="    } else if (servo == 8) {" line117="        Kitronik_Robotics_Board.servoWrite(Kitronik_Robotics_Board.Servos.Servo8, _newAngle)" line118="    }" line119="}" line120="" line121="// t must be between 0 and 1" line122="function easeServo(servo: number, current: number, delta: number, t: number) {" line123="" line124="    //_newAngle = current + delta * t // linear" line125="    //_newAngle = current + delta * t * (2 - t) // decelerating" line126="    let newAngle2 = current + delta * (t &lt; .5 ? 2 * t * t : -1 + (4 - 2 * t) * t) // acceleration until halfway, then deceleration" line127="    //serial.writeLine(&quot;ease&quot; + (newAngle))" line128="    limitedMove(servo, newAngle2)" line129="    return newAngle2" line130="}" line131="" line132="let _idx = 0" line133="let _newAngle = 0" line134="let multiplier = 0" line135="let KNEEDOWN = 0" line136="let KNEEUP = 0" line137="let HIPBACKWARD = 0" line138="let HIPFORWARD = 0" line139="let positions: number[] = [-1,90,90,90,90,90,90,90,90]" line140="let newPositions: number[] = [-1, 90, 90, 90, 90, 90, 90, 90, 90]" line141="let deltas: number[] = [-1,0,0,0,0,0,0,0,0]" line142="let numSteps = 20" line143="HIPFORWARD = 20" line144="HIPBACKWARD = 40" line145="KNEEUP = 0" line146="KNEEDOWN = 30" line147="    setNewPosition(enumFrontBack.front, enumSide.left, enumJoint.hip, enumDirection.forward)" line148="basic.forever(function () {" line149="&#9;" line150="})" line151="}" numlines="152"></mutation></block></next></block></next></block></next></block></next></block></statement></block></xml>