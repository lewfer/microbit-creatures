<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="f#[4@wV7SECH?4mgm.!f" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id=":gjiyk8boA_!2M~5eVM4" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum enumFrontBack {" line1="    front," line2="    back" line3="}" numlines="4"></mutation><next><block type="typescript_statement" id="//=wGtG*J#(*V{4z(COm" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum enumSide {" line1="    left," line2="    right" line3="}" numlines="4"></mutation><next><block type="typescript_statement" id=")+*%.=3Si!REOd)%ODu}" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum enumJoint {" line1="    hip," line2="    knee" line3="}" numlines="4"></mutation><next><block type="typescript_statement" id="W@jZDs(^XpJAo_rNrkCP" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum enumDirection {" line1="    forward," line2="    backward," line3="    up," line4="    down," line5="    middle" line6="}" numlines="7"></mutation><next><block type="typescript_statement" id="V5;3rfap0Kh*AHQHfX`$" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace creatures {" line1="    //% blockId=setNewPosition" line2="    //% block=&quot;set position frontback %frontback side %side joint %joint position %position&quot;" line3="    export function setNewPosition(frontback: enumFrontBack, side: enumSide, joint: enumJoint, position: enumDirection) {" line4="    let newPositions: number[] = []" line5="    multiplier = 1" line6="        if (side == enumSide.left) {" line7="        multiplier = 1" line8="    } else {" line9="        multiplier = -1" line10="    }" line11="        if (position == enumDirection.forward) {" line12="        _newAngle = HIPFORWARD" line13="        } else if (position == enumDirection.backward) {" line14="        _newAngle = HIPBACKWARD" line15="        } else if (position == enumDirection.up) {" line16="        _newAngle = KNEEUP" line17="        } else if (position == enumDirection.down) {" line18="        _newAngle = KNEEDOWN" line19="    } else {" line20="        _newAngle = 90" line21="    }" line22="    _newAngle = 90 + _newAngle * multiplier" line23="    _idx = getIndex(frontback, side, joint)" line24="    newPositions[_idx] = _newAngle" line25="    serial.writeLine(&quot;&quot; + _idx + &quot;,&quot; + _newAngle)" line26="}" line27="    function getIndex(frontback: enumFrontBack, side: enumSide, joint: enumJoint) {" line28="        if (frontback == enumFrontBack.front) {" line29="            if (side == enumSide.left) {" line30="                if (joint == enumJoint.hip) {" line31="                _idx = 1" line32="            } else {" line33="                _idx = 2" line34="            }" line35="        } else {" line36="                if (joint == enumJoint.hip) {" line37="                _idx = 3" line38="            } else {" line39="                _idx = 4" line40="            }" line41="        }" line42="    } else {" line43="            if (side == enumSide.left) {" line44="                if (joint == enumJoint.hip) {" line45="                _idx = 5" line46="            } else {" line47="                _idx = 6" line48="            }" line49="        } else {" line50="                if (joint == enumJoint.hip) {" line51="                _idx = 7" line52="            } else {" line53="                _idx = 8" line54="            }" line55="        }" line56="    }" line57="    return _idx" line58="}" line59="function limitedMove (servo: number, angle: number) {" line60="    if (_newAngle &lt; 20) {" line61="        _newAngle = 20" line62="    } else if (_newAngle &gt; 160) {" line63="        _newAngle = 160" line64="    } else {" line65="        _newAngle = angle" line66="    }" line67="    if (servo == 1) {" line68="        Kitronik_Robotics_Board.servoWrite(Kitronik_Robotics_Board.Servos.Servo1, _newAngle)" line69="    } else if (servo == 2) {" line70="        Kitronik_Robotics_Board.servoWrite(Kitronik_Robotics_Board.Servos.Servo2, _newAngle)" line71="    } else if (servo == 3) {" line72="        Kitronik_Robotics_Board.servoWrite(Kitronik_Robotics_Board.Servos.Servo3, _newAngle)" line73="    } else if (servo == 4) {" line74="        Kitronik_Robotics_Board.servoWrite(Kitronik_Robotics_Board.Servos.Servo4, _newAngle)" line75="    } else if (servo == 5) {" line76="        Kitronik_Robotics_Board.servoWrite(Kitronik_Robotics_Board.Servos.Servo5, _newAngle)" line77="    } else if (servo == 6) {" line78="        Kitronik_Robotics_Board.servoWrite(Kitronik_Robotics_Board.Servos.Servo6, _newAngle)" line79="    } else if (servo == 7) {" line80="        Kitronik_Robotics_Board.servoWrite(Kitronik_Robotics_Board.Servos.Servo7, _newAngle)" line81="    } else if (servo == 8) {" line82="        Kitronik_Robotics_Board.servoWrite(Kitronik_Robotics_Board.Servos.Servo8, _newAngle)" line83="    }" line84="}" line85="let _idx = 0" line86="let _newAngle = 0" line87="let multiplier = 0" line88="let KNEEDOWN = 0" line89="let KNEEUP = 0" line90="let HIPBACKWARD = 0" line91="let HIPFORWARD = 0" line92="let positions: number[] = []" line93="let numSteps = 50" line94="HIPFORWARD = 20" line95="HIPBACKWARD = 40" line96="KNEEUP = 0" line97="KNEEDOWN = 30" line98="    setNewPosition(enumFrontBack.front, enumSide.left, enumJoint.hip, enumDirection.forward)" line99="basic.forever(function () {" line100="&#9;" line101="})" line102="}" numlines="103"></mutation></block></next></block></next></block></next></block></next></block></statement></block></xml>