<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" x="10" y="10"><statement name="HANDLER"><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum enumLeg {" line1="    frontLeft," line2="    frontRight," line3="    backLeft," line4="    backRight" line5="}" numlines="6"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum enumJoint {" line1="    hip," line2="    knee" line3="}" numlines="4"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum enumDirection {" line1="    forward," line2="    backward," line3="    up," line4="    down," line5="    middle" line6="}" numlines="7"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum enumHipDirection {" line1="    forward," line2="    back," line3="    forwardMore," line4="    backMore," line5="    middle" line6="}" numlines="7"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum enumKneeDirection {" line1="    up," line2="    down," line3="    upMore," line4="    downMore," line5="    middle" line6="}" numlines="7"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace creatures {" line1="    //% blockId=moveHip" line2="    //% block=&quot;set hip %leg %direction&quot;" line3="    //% group=&quot;Set servo positions&quot;" line4="    //% weight=50" line5="    export function moveHip(leg: enumLeg, direction: enumHipDirection) {" line6="        let multiplier" line7="        serial.writeLine(&quot;moveHip &quot; + leg + &quot;,&quot; + direction)" line8="        let newAngle" line9="        multiplier = 1" line10="        if (leg == enumLeg.frontLeft || leg == enumLeg.backLeft) {" line11="            multiplier = 1" line12="        } else {" line13="            multiplier = -1" line14="        }" line15="        if (direction == enumHipDirection.forward) {" line16="            newAngle = HIPFORWARD" line17="        } else if (direction == enumHipDirection.back) {" line18="            newAngle = HIPBACK" line19="        } else if (direction == enumHipDirection.forwardMore) {" line20="            newAngle = HIPFORWARDMORE" line21="        } else if (direction == enumHipDirection.backMore) {" line22="            newAngle = HIPBACKMORE" line23="        } else {" line24="            newAngle = 0" line25="        }" line26="        let idx = getIndex(leg, enumJoint.hip)" line27="        newRawAngles[idx] = 90 + newAngle * multiplier" line28="        serial.writeLine(&quot;set &quot; + idx + &quot;,&quot; + newRawAngles[idx])" line29="    }" line30="" line31="    //% blockId=moveKnee" line32="    //% block=&quot;set knee %leg %direction&quot;" line33="    //% group=&quot;Set servo positions&quot;" line34="    //% weight=40" line35="    export function moveKnee(leg: enumLeg, direction: enumKneeDirection) {" line36="        let multiplier2" line37="        serial.writeLine(&quot;setNewPosition &quot; + leg + &quot;,&quot; + direction)" line38="        let newAngle2" line39="        multiplier2 = 1" line40="        if (leg == enumLeg.frontLeft || leg == enumLeg.backLeft) {" line41="            multiplier2 = 1" line42="        } else {" line43="            multiplier2 = -1" line44="        }" line45="        if (direction == enumKneeDirection.up) {" line46="            newAngle2 = KNEEUP" line47="        } else if (direction == enumKneeDirection.down) {" line48="            newAngle2 = KNEEDOWN" line49="        } else if (direction == enumKneeDirection.upMore) {" line50="            newAngle2 = KNEEUPMORE" line51="        } else if (direction == enumKneeDirection.downMore) {" line52="            newAngle2 = KNEEDOWNMORE" line53="        } else {" line54="            newAngle2 = 0" line55="        }" line56="        let idx2 = getIndex(leg, enumJoint.knee)" line57="        newRawAngles[idx2] = 90 + newAngle2 * multiplier2" line58="        serial.writeLine(&quot;set &quot; + idx2 + &quot;,&quot; + newRawAngles[idx2])" line59="    }" line60="" line61="    //% blockId=smoothMoveHip" line62="    //% block=&quot;smooth move hip %leg %direction&quot;" line63="    //% group=&quot;Move servos&quot;" line64="    //% weight=50" line65="    export function smoothMoveHip(leg: enumLeg, direction: enumHipDirection) {" line66="        let multiplier3" line67="        serial.writeLine(&quot;moveHip &quot; + leg + &quot;,&quot; + direction)" line68="        let newAngle3" line69="        multiplier3 = 1" line70="        if (leg == enumLeg.frontLeft || leg == enumLeg.backLeft) {" line71="            multiplier3 = 1" line72="        } else {" line73="            multiplier3 = -1" line74="        }" line75="        if (direction == enumHipDirection.forward) {" line76="            newAngle3 = HIPFORWARD" line77="        } else if (direction == enumHipDirection.back) {" line78="            newAngle3 = HIPBACK" line79="        } else if (direction == enumHipDirection.forwardMore) {" line80="            newAngle3 = HIPFORWARDMORE" line81="        } else if (direction == enumHipDirection.backMore) {" line82="            newAngle3 = HIPBACKMORE" line83="        } else {" line84="            newAngle3 = 0" line85="        }" line86="        let idx3 = getIndex(leg, enumJoint.hip)" line87="        newRawAngles[idx3] = 90 + newAngle3 * multiplier3" line88="" line89="        // Now move it" line90="        smoothMove(idx3)" line91="    }" line92="" line93="    //% blockId=smoothMoveKnee" line94="    //% block=&quot;smooth move knee %leg %direction&quot;" line95="    //% group=&quot;Move servos&quot;" line96="    //% weight=40" line97="    export function smoothMoveKnee(leg: enumLeg, direction: enumKneeDirection) {" line98="        let multiplier4" line99="        serial.writeLine(&quot;setNewPosition &quot; + leg + &quot;,&quot; + direction)" line100="        let newAngle4" line101="        multiplier4 = 1" line102="        if (leg == enumLeg.frontLeft || leg == enumLeg.backLeft) {" line103="            multiplier4 = 1" line104="        } else {" line105="            multiplier4 = -1" line106="        }" line107="        if (direction == enumKneeDirection.up) {" line108="            newAngle4 = KNEEUP" line109="        } else if (direction == enumKneeDirection.down) {" line110="            newAngle4 = KNEEDOWN" line111="        } else if (direction == enumKneeDirection.upMore) {" line112="            newAngle4 = KNEEUPMORE" line113="        } else if (direction == enumKneeDirection.downMore) {" line114="            newAngle4 = KNEEDOWNMORE" line115="        } else {" line116="            newAngle4 = 0" line117="        }" line118="        let idx4 = getIndex(leg, enumJoint.knee)" line119="        newRawAngles[idx4] = 90 + newAngle4 * multiplier4        " line120="        " line121="        // Now move it" line122="        smoothMove(idx4)" line123="    }" line124="" line125="" line126="" line127="    //% blockId=moveHipAngle" line128="    //% block=&quot;set hip angle %leg %angle&quot;" line129="    //% angle.min=-70 angle.max=70" line130="    //% group=&quot;Set servo positions&quot;" line131="    //% weight=30" line132="    export function moveHipAngle(leg: enumLeg, angle: number) {" line133="        let multiplier5" line134="        serial.writeLine(&quot;moveHipAngle &quot; + leg + &quot;,&quot; + angle)" line135="        multiplier5 = 1" line136="        if (leg == enumLeg.frontLeft || leg == enumLeg.backLeft) {" line137="            multiplier5 = 1" line138="        } else {" line139="            multiplier5 = -1" line140="        }" line141="        let idx5 = getIndex(leg, enumJoint.hip)" line142="        newRawAngles[idx5] = 90+angle" line143="        serial.writeLine(&quot;set &quot; + idx5 + &quot;,&quot; + angle)" line144="    }" line145="" line146="    //% blockId=moveKneeAngle" line147="    //% block=&quot;set knee angle %leg %angle&quot;" line148="    //% angle.min=-70 angle.max=70" line149="    //% group=&quot;Set servo positions&quot;" line150="    //% weight=20" line151="    export function moveKneeAngle(leg: enumLeg, angle: number) {" line152="        let multiplier6" line153="        serial.writeLine(&quot;moveKneeAngle &quot; + leg + &quot;,&quot; + angle)" line154="        multiplier6 = 1" line155="        if (leg == enumLeg.frontLeft || leg == enumLeg.backLeft) {" line156="            multiplier6 = 1" line157="        } else {" line158="            multiplier6 = -1" line159="        }" line160="        let idx6 = getIndex(leg, enumJoint.knee)" line161="        newRawAngles[idx6] = 90+angle" line162="        serial.writeLine(&quot;set &quot; + idx6 + &quot;,&quot; + angle)" line163="    }" line164="" line165="    //% blockId=moveServoAngle" line166="    //% block=&quot;set servo %servo to angle %angle&quot;" line167="    //% servo.min=1 servo.max=8" line168="    //% angle.min=-70 angle.max=70" line169="    //% group=&quot;Set servo positions&quot;" line170="    //% weight=10" line171="    export function moveServoAngle(servo: number, angle: number) {" line172="        let multiplier7" line173="        serial.writeLine(&quot;moveServoAngle &quot; + servo + &quot;,&quot; + angle)" line174="        newRawAngles[servo] = 90+angle" line175="    }" line176="" line177="" line178="    //% blockId=directMove" line179="    //% block=&quot;direct move servo %servo&quot;" line180="    //% servo.min=1 servo.max=8" line181="    //% group=&quot;Move servos&quot;" line182="    //% weight=20" line183="    export function directMove(servo: number) {" line184="        // Move" line185="        limitedMove(servo, newRawAngles[servo])" line186="        // Update to final position" line187="        rawAngles[servo] = newRawAngles[servo]" line188="    }" line189="" line190="    //% blockId=smoothMove" line191="    //% block=&quot;smooth move servo %servo&quot;" line192="    //% servo.min=1 servo.max=8" line193="    //% group=&quot;Move servos&quot;" line194="    //% weight=40" line195="    export function smoothMove(servo: number) {" line196="        deltas[servo] = newRawAngles[servo] - rawAngles[servo]" line197="" line198="        // Ease servo to new position" line199="        for (let idx22 = 0; idx22 &lt;= SMOOTHNESS; idx22++) {" line200="            easeServo(servo, rawAngles[servo], deltas[servo], idx22 / SMOOTHNESS)" line201="            basic.pause(20)" line202="        }" line203="" line204="        // Update to final position" line205="        rawAngles[servo] = newRawAngles[servo]" line206="    }" line207="" line208="    //% blockId=smoothMoveAll" line209="    //% block=&quot;smooth move all servos&quot;" line210="    //% group=&quot;Move servos&quot;" line211="    //% weight=50" line212="    export function smoothMoveAll() {" line213="        // Compute deltas" line214="        deltas = [" line215="            0," line216="            (newRawAngles[1] - rawAngles[1])," line217="            (newRawAngles[2] - rawAngles[2])," line218="            (newRawAngles[3] - rawAngles[3])," line219="            (newRawAngles[4] - rawAngles[4])," line220="            (newRawAngles[5] - rawAngles[5])," line221="            (newRawAngles[6] - rawAngles[6])," line222="            (newRawAngles[7] - rawAngles[7])," line223="            (newRawAngles[8] - rawAngles[8])" line224="        ]" line225="" line226="        //serial.writeLine(&quot;delta &quot; + rawAngles[1] + &quot; &quot; + newRawAngles[1] + &quot; &quot; + deltas[1] )" line227="        // Ease servos to their new position" line228="        for (let idx23 = 0; idx23 &lt;= SMOOTHNESS; idx23++) {" line229="            for (let servo=1; servo&lt;=8; servo++) {" line230="                easeServo(servo, rawAngles[servo], deltas[servo], idx23 / SMOOTHNESS)" line231="            }" line232="            //limitedMove(1, rawAngles[1])" line233="            //let easePosition = easeServo(1, rawAngles[1], deltas[1], idx / numSteps)" line234="            //serial.writeLine(&quot;position&quot; + deltas[1] + &quot;,&quot; + easePosition)" line235="            basic.pause(20)" line236="        }" line237="" line238="        // Update to final rawAngles" line239="        for (let servo2 = 1; servo2 &lt;= 8; servo2++)" line240="            rawAngles[servo2] = newRawAngles[servo2]" line241="    }" line242="" line243="" line244="" line245="    function getIndex(leg: enumLeg, joint: enumJoint) {" line246="        let idx32=0;" line247="        if (leg == enumLeg.frontLeft) {" line248="            if (joint == enumJoint.hip) {" line249="                idx32 = 1" line250="            } else {" line251="                idx32 = 2" line252="            }" line253="        }" line254="        else if (leg == enumLeg.frontRight) {" line255="            if (joint == enumJoint.hip) {" line256="                idx32 = 3" line257="            } else {" line258="                idx32 = 4" line259="            }" line260="        }" line261="        else if (leg == enumLeg.backLeft) {" line262="            if (joint == enumJoint.hip) {" line263="                idx32 = 5" line264="            } else {" line265="                idx32 = 6" line266="            }" line267="        } else if (leg == enumLeg.backRight) {" line268="            if (joint == enumJoint.hip) {" line269="                idx32 = 7" line270="            } else {" line271="                idx32 = 8" line272="            }" line273="        }" line274="        return idx32" line275="    }" line276="" line277="    function limitedMove (servo: number, rawAngle: number) {" line278="        let newRawAngle" line279="        if (rawAngle &lt; 20) {" line280="            newRawAngle = 20" line281="        } else if (rawAngle &gt; 160) {" line282="            newRawAngle = 160" line283="        } else {" line284="            newRawAngle = rawAngle" line285="        }" line286="" line287="        serial.writeLine(&quot;limitedMove &quot; + servo + &quot;,&quot; + newRawAngle)" line288="        if (servo == 1) {" line289="            Kitronik_Robotics_Board.servoWrite(Kitronik_Robotics_Board.Servos.Servo1, newRawAngle)" line290="        } else if (servo == 2) {" line291="            Kitronik_Robotics_Board.servoWrite(Kitronik_Robotics_Board.Servos.Servo2, newRawAngle)" line292="        } else if (servo == 3) {" line293="            Kitronik_Robotics_Board.servoWrite(Kitronik_Robotics_Board.Servos.Servo3, newRawAngle)" line294="        } else if (servo == 4) {" line295="            Kitronik_Robotics_Board.servoWrite(Kitronik_Robotics_Board.Servos.Servo4, newRawAngle)" line296="        } else if (servo == 5) {" line297="            Kitronik_Robotics_Board.servoWrite(Kitronik_Robotics_Board.Servos.Servo5, newRawAngle)" line298="        } else if (servo == 6) {" line299="            Kitronik_Robotics_Board.servoWrite(Kitronik_Robotics_Board.Servos.Servo6, newRawAngle)" line300="        } else if (servo == 7) {" line301="            Kitronik_Robotics_Board.servoWrite(Kitronik_Robotics_Board.Servos.Servo7, newRawAngle)" line302="        } else if (servo == 8) {" line303="            Kitronik_Robotics_Board.servoWrite(Kitronik_Robotics_Board.Servos.Servo8, newRawAngle)" line304="        }" line305="    }" line306="" line307="    // t must be between 0 and 1" line308="    function easeServo(servo: number, current: number, delta: number, t: number) {" line309="" line310="        //_newAngle = current + delta * t // linear" line311="        //_newAngle = current + delta * t * (2 - t) // decelerating" line312="        let newRawAngle2 = current + delta * (t &lt; .5 ? 2 * t * t : -1 + (4 - 2 * t) * t) // acceleration until halfway, then deceleration" line313="        //serial.writeLine(&quot;ease&quot; + (newRawAngle2))" line314="        limitedMove(servo, newRawAngle2)" line315="        return newRawAngle2" line316="    }" line317="" line318="" line319="    //% blockId=setHipForwardOffset" line320="    //% block=&quot;set hip forward offset %offset&quot;" line321="    //% offset.min=-70 offset.max=70" line322="    //% group=&quot;Standard offsets&quot;" line323="    //% weight=50" line324="    export function setHipForwardOffset(offset:number) {" line325="        HIPFORWARD = offset" line326="    }" line327="" line328="    //% blockId=setHipBackwardOffset" line329="    //% block=&quot;set hip backward offset %offset&quot;" line330="    //% offset.min=-70 offset.max=70" line331="    //% group=&quot;Standard offsets&quot;" line332="    //% weight=40" line333="    export function setHipBackwardOffset(offset:number) {" line334="        HIPBACK = offset" line335="    }" line336="" line337="    //% blockId=setHipForwardMoreOffset" line338="    //% block=&quot;set hip forwardmore offset %offset&quot;" line339="    //% offset.min=-70 offset.max=70" line340="    //% group=&quot;Standard offsets&quot;" line341="    //% weight=50" line342="    export function setHipForwardMoreOffset(offset: number) {" line343="        HIPFORWARDMORE = offset" line344="    }" line345="" line346="    //% blockId=setHipBackwardMoreOffset" line347="    //% block=&quot;set hip backwardmore offset %offset&quot;" line348="    //% offset.min=-70 offset.max=70" line349="    //% group=&quot;Standard offsets&quot;" line350="    //% weight=40" line351="    export function setHipBackwardMoreOffset(offset: number) {" line352="        HIPBACKMORE = offset" line353="    }" line354="" line355="    //% blockId=setKneeUpOffset" line356="    //% block=&quot;set knee up offset %offset&quot;" line357="    //% offset.min=-70 offset.max=70" line358="    //% group=&quot;Standard offsets&quot;" line359="    //% weight=30" line360="    export function setKneeUpOffset(offset: number) {" line361="        KNEEUP = offset" line362="    }" line363="" line364="    //% blockId=setKneeDownOffset" line365="    //% block=&quot;set knee down offset %offset&quot;" line366="    //% offset.min=-70 offset.max=70" line367="    //% group=&quot;Standard offsets&quot;" line368="    //% weight=20" line369="    export function setKneeDownOffset(offset: number) {" line370="        KNEEDOWN = offset" line371="    }" line372="" line373="    //% blockId=setKneeUpMoreOffset" line374="    //% block=&quot;set knee upmore offset %offset&quot;" line375="    //% offset.min=-70 offset.max=70" line376="    //% group=&quot;Standard offsets&quot;" line377="    //% weight=30" line378="    export function setKneeUpMoreOffset(offset: number) {" line379="        KNEEUPMORE = offset" line380="    }" line381="" line382="    //% blockId=setKneeDownMOreOffset" line383="    //% block=&quot;set knee downmore offset %offset&quot;" line384="    //% offset.min=-70 offset.max=70" line385="    //% group=&quot;Standard offsets&quot;" line386="    //% weight=20" line387="    export function setKneeDownMoreOffset(offset: number) {" line388="        KNEEDOWNMORE = offset" line389="    }" line390="" line391="    //% blockId=setSmoothness" line392="    //% block=&quot;set smoothness %steps&quot;" line393="    //% angle.steps=1 steps.max=50" line394="    //% group=&quot;Settings&quot;" line395="    //% weight=50" line396="    export function setSmoothness(steps: number) {" line397="        SMOOTHNESS = steps" line398="    }" line399="" line400="" line401="    let KNEEUPMORE = -20" line402="    let KNEEUP = 0" line403="    let KNEEDOWN = 30" line404="    let KNEEDOWNMORE = 40" line405="    let HIPBACKMORE = 40" line406="    let HIPBACK = 20" line407="    let HIPFORWARD = 20" line408="    let HIPFORWARDMORE = 40" line409="    let rawAngles: number[] = [-1,90,90,90,90,90,90,90,90]" line410="    let newRawAngles: number[] = [-1, 90, 90, 90, 90, 90, 90, 90, 90]" line411="    let deltas: number[] = [-1,0,0,0,0,0,0,0,0]" line412="    let SMOOTHNESS = 20" line413="    for (let servo3 = 1; servo3 &lt;= 8; servo3++) {" line414="        limitedMove(servo3, rawAngles[servo3])" line415="    }" line416="    basic.forever(function () {" line417="        " line418="    })" line419="}" numlines="420"></mutation></block></next></block></next></block></next></block></next></block></next></block></statement></block></xml>