<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="+7=WO)W%6ei.eBs[2fVP" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="Js/I4xo_+d{nnQ2hnk?4" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum enumLeg {" line1="    frontLeft," line2="    frontRight," line3="    backLeft," line4="    backRight" line5="}" numlines="6"></mutation><next><block type="typescript_statement" id="D!/3q@voW!w|n!c4]Ouw" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum enumJoint {" line1="    hip," line2="    knee" line3="}" numlines="4"></mutation><next><block type="typescript_statement" id="HqCThR~Z1Ai#5,7bkD|l" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum enumDirection {" line1="    forward," line2="    backward," line3="    up," line4="    down," line5="    middle" line6="}" numlines="7"></mutation><next><block type="typescript_statement" id="x!/jA6F=Vom:m2euZ2;B" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum enumHipDirection {" line1="    forward," line2="    backward," line3="    middle" line4="}" numlines="5"></mutation><next><block type="typescript_statement" id="e^P4e8+%gN|++GetB2{6" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum enumKneeDirection {" line1="    up," line2="    down," line3="    upmore," line4="    downmore," line5="    middle" line6="}" numlines="7"></mutation><next><block type="typescript_statement" id="Z0f-*R;DrmDWF(!n@w/4" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace creatures {" line1="    //% blockId=moveHip" line2="    //% block=&quot;set hip %leg %direction&quot;" line3="    //% group=&quot;Set servo positions&quot;" line4="    //% weight=50" line5="    export function moveHip(leg: enumLeg, direction: enumHipDirection) {" line6="        let multiplier" line7="        serial.writeLine(&quot;moveHip &quot; + leg + &quot;,&quot; + direction)" line8="        let newAngle" line9="        multiplier = 1" line10="        if (leg == enumLeg.frontLeft || leg == enumLeg.backLeft) {" line11="            multiplier = 1" line12="        } else {" line13="            multiplier = -1" line14="        }" line15="        if (direction == enumHipDirection.forward) {" line16="            newAngle = HIPFORWARD" line17="        } else if (direction == enumHipDirection.backward) {" line18="            newAngle = HIPBACKWARD" line19="        } else {" line20="            newAngle = 0" line21="        }" line22="        let idx = getIndex(leg, enumJoint.hip)" line23="        newRawAngles[idx] = 90 + newAngle * multiplier" line24="        serial.writeLine(&quot;set &quot; + idx + &quot;,&quot; + newRawAngles[idx])" line25="    }" line26="" line27="    //% blockId=moveKnee" line28="    //% block=&quot;set knee %leg %direction&quot;" line29="    //% group=&quot;Set servo positions&quot;" line30="    //% weight=40" line31="    export function moveKnee(leg: enumLeg, direction: enumKneeDirection) {" line32="        let multiplier2" line33="        serial.writeLine(&quot;setNewPosition &quot; + leg + &quot;,&quot; + direction)" line34="        let newAngle2" line35="        multiplier2 = 1" line36="        if (leg == enumLeg.frontLeft || leg == enumLeg.backLeft) {" line37="            multiplier2 = 1" line38="        } else {" line39="            multiplier2 = -1" line40="        }" line41="        if (direction == enumKneeDirection.up) {" line42="            newAngle2 = KNEEUP" line43="        } else if (direction == enumKneeDirection.down) {" line44="            newAngle2 = KNEEDOWN" line45="        } else {" line46="            newAngle2 = 0" line47="        }" line48="        let idx2 = getIndex(leg, enumJoint.knee)" line49="        newRawAngles[idx2] = 90 + newAngle2 * multiplier2" line50="        serial.writeLine(&quot;set &quot; + idx2 + &quot;,&quot; + newRawAngles[idx2])" line51="    }" line52="" line53="    //% blockId=smoothMoveHip" line54="    //% block=&quot;smooth move hip %leg %direction&quot;" line55="    //% group=&quot;Move servos&quot;" line56="    //% weight=50" line57="    export function smoothMoveHip(leg: enumLeg, direction: enumHipDirection) {" line58="        let multiplier3" line59="        serial.writeLine(&quot;moveHip &quot; + leg + &quot;,&quot; + direction)" line60="        let newAngle3" line61="        multiplier3 = 1" line62="        if (leg == enumLeg.frontLeft || leg == enumLeg.backLeft) {" line63="            multiplier3 = 1" line64="        } else {" line65="            multiplier3 = -1" line66="        }" line67="        if (direction == enumHipDirection.forward) {" line68="            newAngle3 = HIPFORWARD" line69="        } else if (direction == enumHipDirection.backward) {" line70="            newAngle3 = HIPBACKWARD" line71="        } else {" line72="            newAngle3 = 0" line73="        }" line74="        let idx3 = getIndex(leg, enumJoint.hip)" line75="        newRawAngles[idx3] = 90 + newAngle3 * multiplier3" line76="" line77="        // Now move it" line78="        smoothMove(idx3)" line79="    }" line80="" line81="    //% blockId=smoothMoveKnee" line82="    //% block=&quot;smooth move knee %leg %direction&quot;" line83="    //% group=&quot;Move servos&quot;" line84="    //% weight=40" line85="    export function smoothMoveKnee(leg: enumLeg, direction: enumKneeDirection) {" line86="        let multiplier4" line87="        serial.writeLine(&quot;setNewPosition &quot; + leg + &quot;,&quot; + direction)" line88="        let newAngle4" line89="        multiplier4 = 1" line90="        if (leg == enumLeg.frontLeft || leg == enumLeg.backLeft) {" line91="            multiplier4 = 1" line92="        } else {" line93="            multiplier4 = -1" line94="        }" line95="        if (direction == enumKneeDirection.up) {" line96="            newAngle4 = KNEEUP" line97="        } else if (direction == enumKneeDirection.down) {" line98="            newAngle4 = KNEEDOWN" line99="        } else if (direction == enumKneeDirection.upmore) {" line100="            newAngle4 = KNEEUPMORE" line101="        } else if (direction == enumKneeDirection.downmore) {" line102="            newAngle4 = KNEEDOWNMORE" line103="        } else {" line104="            newAngle4 = 0" line105="        }" line106="        let idx4 = getIndex(leg, enumJoint.knee)" line107="        newRawAngles[idx4] = 90 + newAngle4 * multiplier4        " line108="        " line109="        // Now move it" line110="        smoothMove(idx4)" line111="    }" line112="" line113="" line114="" line115="    //% blockId=moveHipAngle" line116="    //% block=&quot;set hip angle %leg %angle&quot;" line117="    //% angle.min=-70 angle.max=70" line118="    //% group=&quot;Set servo positions&quot;" line119="    //% weight=30" line120="    export function moveHipAngle(leg: enumLeg, angle: number) {" line121="        let multiplier5" line122="        serial.writeLine(&quot;moveHipAngle &quot; + leg + &quot;,&quot; + angle)" line123="        multiplier5 = 1" line124="        if (leg == enumLeg.frontLeft || leg == enumLeg.backLeft) {" line125="            multiplier5 = 1" line126="        } else {" line127="            multiplier5 = -1" line128="        }" line129="        let idx5 = getIndex(leg, enumJoint.hip)" line130="        newRawAngles[idx5] = 90+angle" line131="        serial.writeLine(&quot;set &quot; + idx5 + &quot;,&quot; + angle)" line132="    }" line133="" line134="    //% blockId=moveKneeAngle" line135="    //% block=&quot;set knee angle %leg %angle&quot;" line136="    //% angle.min=-70 angle.max=70" line137="    //% group=&quot;Set servo positions&quot;" line138="    //% weight=20" line139="    export function moveKneeAngle(leg: enumLeg, angle: number) {" line140="        let multiplier6" line141="        serial.writeLine(&quot;moveKneeAngle &quot; + leg + &quot;,&quot; + angle)" line142="        multiplier6 = 1" line143="        if (leg == enumLeg.frontLeft || leg == enumLeg.backLeft) {" line144="            multiplier6 = 1" line145="        } else {" line146="            multiplier6 = -1" line147="        }" line148="        let idx6 = getIndex(leg, enumJoint.knee)" line149="        newRawAngles[idx6] = 90+angle" line150="        serial.writeLine(&quot;set &quot; + idx6 + &quot;,&quot; + angle)" line151="    }" line152="" line153="    //% blockId=moveServoAngle" line154="    //% block=&quot;set servo %servo to angle %angle&quot;" line155="    //% servo.min=1 servo.max=8" line156="    //% angle.min=-70 angle.max=70" line157="    //% group=&quot;Set servo positions&quot;" line158="    //% weight=10" line159="    export function moveServoAngle(servo: number, angle: number) {" line160="        let multiplier7" line161="        serial.writeLine(&quot;moveServoAngle &quot; + servo + &quot;,&quot; + angle)" line162="        newRawAngles[servo] = 90+angle" line163="    }" line164="" line165="" line166="    //% blockId=directMove" line167="    //% block=&quot;direct move servo %servo&quot;" line168="    //% servo.min=1 servo.max=8" line169="    //% group=&quot;Move servos&quot;" line170="    //% weight=20" line171="    export function directMove(servo: number) {" line172="        // Move" line173="        limitedMove(servo, newRawAngles[servo])" line174="        // Update to final position" line175="        rawAngles[servo] = newRawAngles[servo]" line176="    }" line177="" line178="    //% blockId=smoothMove" line179="    //% block=&quot;smooth move servo %servo&quot;" line180="    //% servo.min=1 servo.max=8" line181="    //% group=&quot;Move servos&quot;" line182="    //% weight=40" line183="    export function smoothMove(servo: number) {" line184="        deltas[servo] = newRawAngles[servo] - rawAngles[servo]" line185="" line186="        // Ease servo to new position" line187="        for (let idx22 = 0; idx22 &lt;= SMOOTHNESS; idx22++) {" line188="            easeServo(servo, rawAngles[servo], deltas[servo], idx22 / SMOOTHNESS)" line189="            basic.pause(20)" line190="        }" line191="" line192="        // Update to final position" line193="        rawAngles[servo] = newRawAngles[servo]" line194="    }" line195="" line196="    //% blockId=smoothMoveAll" line197="    //% block=&quot;smooth move all servos&quot;" line198="    //% group=&quot;Move servos&quot;" line199="    //% weight=50" line200="    export function smoothMoveAll() {" line201="        // Compute deltas" line202="        deltas = [" line203="            0," line204="            (newRawAngles[1] - rawAngles[1])," line205="            (newRawAngles[2] - rawAngles[2])," line206="            (newRawAngles[3] - rawAngles[3])," line207="            (newRawAngles[4] - rawAngles[4])," line208="            (newRawAngles[5] - rawAngles[5])," line209="            (newRawAngles[6] - rawAngles[6])," line210="            (newRawAngles[7] - rawAngles[7])," line211="            (newRawAngles[8] - rawAngles[8])" line212="        ]" line213="" line214="        //serial.writeLine(&quot;delta &quot; + rawAngles[1] + &quot; &quot; + newRawAngles[1] + &quot; &quot; + deltas[1] )" line215="        // Ease servos to their new position" line216="        for (let idx23 = 0; idx23 &lt;= SMOOTHNESS; idx23++) {" line217="            for (let servo=1; servo&lt;=8; servo++) {" line218="                easeServo(servo, rawAngles[servo], deltas[servo], idx23 / SMOOTHNESS)" line219="            }" line220="            //limitedMove(1, rawAngles[1])" line221="            //let easePosition = easeServo(1, rawAngles[1], deltas[1], idx / numSteps)" line222="            //serial.writeLine(&quot;position&quot; + deltas[1] + &quot;,&quot; + easePosition)" line223="            basic.pause(20)" line224="        }" line225="" line226="        // Update to final rawAngles" line227="        for (let servo2 = 1; servo2 &lt;= 8; servo2++)" line228="            rawAngles[servo2] = newRawAngles[servo2]" line229="    }" line230="" line231="" line232="" line233="    function getIndex(leg: enumLeg, joint: enumJoint) {" line234="        let idx32=0;" line235="        if (leg == enumLeg.frontLeft) {" line236="            if (joint == enumJoint.hip) {" line237="                idx32 = 1" line238="            } else {" line239="                idx32 = 2" line240="            }" line241="        }" line242="        else if (leg == enumLeg.frontRight) {" line243="            if (joint == enumJoint.hip) {" line244="                idx32 = 3" line245="            } else {" line246="                idx32 = 4" line247="            }" line248="        }" line249="        else if (leg == enumLeg.backLeft) {" line250="            if (joint == enumJoint.hip) {" line251="                idx32 = 5" line252="            } else {" line253="                idx32 = 6" line254="            }" line255="        } else if (leg == enumLeg.backRight) {" line256="            if (joint == enumJoint.hip) {" line257="                idx32 = 7" line258="            } else {" line259="                idx32 = 8" line260="            }" line261="        }" line262="        return idx32" line263="    }" line264="" line265="    function limitedMove (servo: number, rawAngle: number) {" line266="        let newRawAngle" line267="        if (rawAngle &lt; 20) {" line268="            newRawAngle = 20" line269="        } else if (rawAngle &gt; 160) {" line270="            newRawAngle = 160" line271="        } else {" line272="            newRawAngle = rawAngle" line273="        }" line274="" line275="        serial.writeLine(&quot;limitedMove &quot; + servo + &quot;,&quot; + newRawAngle)" line276="        if (servo == 1) {" line277="            Kitronik_Robotics_Board.servoWrite(Kitronik_Robotics_Board.Servos.Servo1, newRawAngle)" line278="        } else if (servo == 2) {" line279="            Kitronik_Robotics_Board.servoWrite(Kitronik_Robotics_Board.Servos.Servo2, newRawAngle)" line280="        } else if (servo == 3) {" line281="            Kitronik_Robotics_Board.servoWrite(Kitronik_Robotics_Board.Servos.Servo3, newRawAngle)" line282="        } else if (servo == 4) {" line283="            Kitronik_Robotics_Board.servoWrite(Kitronik_Robotics_Board.Servos.Servo4, newRawAngle)" line284="        } else if (servo == 5) {" line285="            Kitronik_Robotics_Board.servoWrite(Kitronik_Robotics_Board.Servos.Servo5, newRawAngle)" line286="        } else if (servo == 6) {" line287="            Kitronik_Robotics_Board.servoWrite(Kitronik_Robotics_Board.Servos.Servo6, newRawAngle)" line288="        } else if (servo == 7) {" line289="            Kitronik_Robotics_Board.servoWrite(Kitronik_Robotics_Board.Servos.Servo7, newRawAngle)" line290="        } else if (servo == 8) {" line291="            Kitronik_Robotics_Board.servoWrite(Kitronik_Robotics_Board.Servos.Servo8, newRawAngle)" line292="        }" line293="    }" line294="" line295="    // t must be between 0 and 1" line296="    function easeServo(servo: number, current: number, delta: number, t: number) {" line297="" line298="        //_newAngle = current + delta * t // linear" line299="        //_newAngle = current + delta * t * (2 - t) // decelerating" line300="        let newRawAngle2 = current + delta * (t &lt; .5 ? 2 * t * t : -1 + (4 - 2 * t) * t) // acceleration until halfway, then deceleration" line301="        //serial.writeLine(&quot;ease&quot; + (newRawAngle2))" line302="        limitedMove(servo, newRawAngle2)" line303="        return newRawAngle2" line304="    }" line305="" line306="" line307="    //% blockId=setHipForwardOffset" line308="    //% block=&quot;set hip forward offset %offset&quot;" line309="    //% offset.min=-70 offset.max=70" line310="    //% group=&quot;Standard offsets&quot;" line311="    //% weight=50" line312="    export function setHipForwardOffset(offset:number) {" line313="        HIPFORWARD = offset" line314="    }" line315="" line316="    //% blockId=setHipBackwardOffset" line317="    //% block=&quot;set hip backward offset %offset&quot;" line318="    //% offset.min=-70 offset.max=70" line319="    //% group=&quot;Standard offsets&quot;" line320="    //% weight=40" line321="    export function setHipBackwardOffset(offset:number) {" line322="        HIPBACKWARD = offset" line323="    }" line324="" line325="    //% blockId=setKneeUpOffset" line326="    //% block=&quot;set knee up offset %offset&quot;" line327="    //% offset.min=-70 offset.max=70" line328="    //% group=&quot;Standard offsets&quot;" line329="    //% weight=30" line330="    export function setKneeUpOffset(offset: number) {" line331="        KNEEUP = offset" line332="    }" line333="" line334="    //% blockId=setKneeDownOffset" line335="    //% block=&quot;set knee down offset %offset&quot;" line336="    //% offset.min=-70 offset.max=70" line337="    //% group=&quot;Standard offsets&quot;" line338="    //% weight=20" line339="    export function setKneeDownOffset(offset: number) {" line340="        KNEEDOWN = offset" line341="    }" line342="" line343="    //% blockId=setSmoothness" line344="    //% block=&quot;set smoothness %steps&quot;" line345="    //% angle.steps=1 steps.max=50" line346="    //% group=&quot;Settings&quot;" line347="    //% weight=50" line348="    export function setSmoothness(steps: number) {" line349="        SMOOTHNESS = steps" line350="    }" line351="" line352="" line353="    let KNEEDOWN = 0" line354="    let KNEEUP = 0" line355="    let HIPBACKWARD = 0" line356="    let HIPFORWARD = 0" line357="    let KNEEDOWNMORE = 0" line358="    let KNEEUPMORE = 0" line359="    let rawAngles: number[] = [-1,90,90,90,90,90,90,90,90]" line360="    let newRawAngles: number[] = [-1, 90, 90, 90, 90, 90, 90, 90, 90]" line361="    let deltas: number[] = [-1,0,0,0,0,0,0,0,0]" line362="    let SMOOTHNESS = 20" line363="    HIPFORWARD = 20" line364="    HIPBACKWARD = 40" line365="    KNEEUPMORE = -20" line366="    KNEEUP = 0" line367="    KNEEDOWN = 30" line368="    KNEEDOWNMORE = 60" line369="    for (let servo3 = 1; servo3 &lt;= 8; servo3++) {" line370="        limitedMove(servo3, rawAngles[servo3])" line371="    }" line372="    basic.forever(function () {" line373="        " line374="    })" line375="}" numlines="376"></mutation></block></next></block></next></block></next></block></next></block></next></block></statement></block></xml>